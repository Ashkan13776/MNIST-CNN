# -*- coding: utf-8 -*-
"""digit-recognizer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ocOFe47llGMV8K1NYUHVhiDCyX5OxhAM
"""

!pip install -q kaggle

from google.colab import files

files.upload()

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c digit-recognizer

!unzip test.csv.zip

!unzip train.csv.zip

import pandas as pd
df_train = pd.read_csv('train.csv', header=0)
df_test = pd.read_csv('test.csv', header=0)

import numpy as np
import matplotlib.pyplot as plt

array_train = np.array(df_train)
array_test = np.array(df_test)
#print(np.shape(array_test))
#print(np.shape(array_train))
#print((array_train[0,:]))

labels = []
for i in range(np.shape(array_train[:,0])[0]):
  labels.append(array_train[i,0])
labels = np.array(labels)

import cv2 as cv
plt.imshow((np.reshape(array_train[3][1:785],(28,28))))
print(np.shape(array_train)[0])

#pre-processing
X_train = []
for i in range(np.shape(array_train)[0]):
  X_train.append(np.reshape(array_train[i][1:785],(28,28)))
X_train = np.array(X_train)

#libraries
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split 
import matplotlib.pyplot as plt 
from tensorflow.keras.models import Sequential, Model 
from tensorflow.keras.layers import Dense, Input 
from tensorflow.keras.utils import to_categorical 
from tensorflow.keras.layers import Conv2D, Flatten
from tensorflow.keras import backend as K
from tensorflow.keras.layers import Reshape, Conv1DTranspose, Activation, MaxPooling2D, Dropout
from tensorflow.keras.callbacks import TensorBoard
from tensorflow.keras import regularizers
from keras.layers.normalization import BatchNormalization

#model
model = keras.models.Sequential()

model.add(keras.layers.Conv2D(filters = 64, kernel_size=(5,5), padding='same', activation='relu', input_shape=(28, 28, 1)))
model.add(keras.layers.BatchNormalization())

model.add(keras.layers.Conv2D(filters = 64, kernel_size=(5,5), padding='same', activation='relu'))
model.add(keras.layers.BatchNormalization())

model.add(keras.layers.MaxPool2D(pool_size=(2,2)))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Conv2D(filters = 64, kernel_size=(3,3), padding='same', activation='relu'))
model.add(keras.layers.BatchNormalization())

model.add(keras.layers.Conv2D(filters = 64, kernel_size=(3,3), padding='same', activation='relu'))
model.add(keras.layers.BatchNormalization())

model.add(keras.layers.MaxPool2D(pool_size=(2,2)))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(256, activation='relu'))
model.add(keras.layers.BatchNormalization())
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(256, activation='relu'))
model.add(keras.layers.BatchNormalization())
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(10, activation='softmax'))
#summary
model.summary()

X_test = []
for i in range(np.shape(array_test)[0]):
  X_test.append(np.reshape(array_test[i][0:784],(28,28)))
X_test = np.array(X_test)

X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)

# convert class vectors to binary class matrices

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255
print('x_train shape:', X_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')


from keras.utils.np_utils import to_categorical
y_train = to_categorical(labels, num_classes=10)
X_train1, X_val , y_train, y_val = train_test_split(X_train, y_train, test_size=0.2)

print(np.shape(X_train))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=["accuracy"])
history = model.fit(X_train1, y_train, epochs=25, validation_data=(X_val, y_val))

predictions = model.predict(X_test)
results = np.argmax(predictions,axis = 1)
np.savetxt('results.csv',results,delimiter='\n')